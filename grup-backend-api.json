{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "name": "Grup API Collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Collection for testing Grup Backend APIs. Remember to set up your environment variables (baseUrl, userEmail, userPassword, adminEmail, adminPassword) and update dynamic variables (productId, cartId, userId, groupBuyId, orderId, referralCode) as you test."
  },
  "item": [
    {
      "name": "Global/System Endpoints",
      "item": [
        {
          "name": "GET /",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                ""
              ]
            },
            "description": "Expect: 200 JSON banner with “Grup Backend Server”, links to /admin, /admin-upload.html, /api/status, /health"
          },
          "response": []
        },
        {
          "name": "GET /api/status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/status",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "status"
              ]
            },
            "description": "Expect: 200 JSON with status OK, version, timestamps, and endpoint list"
          },
          "response": []
        },
        {
          "name": "GET /health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Expect: 200 JSON with database status { connected/disconnected }, uptime, memory, version"
          },
          "response": []
        },
        {
          "name": "GET /api/cors-test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/cors-test",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "cors-test"
              ]
            },
            "description": "Expect: 200 JSON { message: \"CORS is working!\", origin, method, timestamp }"
          },
          "response": []
        },
        {
          "name": "GET /api/test-image/:filename",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test-image/test-image.svg",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "test-image",
                "test-image.svg"
              ]
            },
            "description": "Preload uploads (scripts/create-uploads-folder.js creates test-image.svg). Expect: 200 and SVG file (or 404 if not present)"
          },
          "response": []
        },
        {
          "name": "Static GET /uploads/*",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/uploads/test-image.svg",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "uploads",
                "test-image.svg"
              ]
            },
            "description": "Expect: 200 SVG with CORS headers"
          },
          "response": []
        },
        {
          "name": "GET /admin-upload.html",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin-upload.html",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin-upload.html"
              ]
            },
            "description": "Open in browser: http://localhost:5001/admin-upload.html. Expect: Admin image upload UI"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Authentication (/api/auth)",
      "item": [
        {
          "name": "POST /api/auth/signup",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "pm.environment.set(\"userToken\", jsonData.token);",
                  "pm.environment.set(\"userId\", jsonData.user.id);",
                  "pm.environment.set(\"referralCode\", jsonData.user.referralCode);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"referralCode\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/signup",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "signup"
              ]
            },
            "description": "Expect: 201 with { token, user: { id, name, email, referralCode, referralLink } }. Notes: Referral logic may credit the referrer on reaching 3 referrals."
          },
          "response": []
        },
        {
          "name": "POST /api/auth/login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "pm.environment.set(\"userToken\", jsonData.token);",
                  "pm.environment.set(\"userId\", jsonData.user.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            },
            "description": "Expect: 200 with { token, user }"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin Upload Auth (/api/admin-auth)",
      "item": [
        {
          "name": "POST /api/admin-auth/admin-login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "pm.environment.set(\"adminToken\", jsonData.token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin-auth/admin-login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "admin-auth",
                "admin-login"
              ]
            },
            "description": "Expect: 200 { success: true, token, user }. Save token to call /api/admin/* endpoints."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin Image Gallery (/api/admin) [Admin token required]",
      "item": [
        {
          "name": "POST /api/admin/upload-images",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "images",
                  "type": "file",
                  "src": "/path/to/your/image.jpg"
                },
                {
                  "key": "description",
                  "value": "A test image upload",
                  "type": "text"
                },
                {
                  "key": "tags",
                  "value": "test,upload",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/upload-images",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "admin",
                "upload-images"
              ]
            },
            "description": "Headers: Authorization: Bearer <adminToken>, multipart/form-data (optional files). Form fields: images: file(s) (up to 5), description (optional), tags (optional, comma-separated). Expect: 200 { success: true, imageUrls: [...], images: [...], count }"
          },
          "response": []
        },
        {
          "name": "GET /api/admin/images",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/admin/images?page=1&limit=10&unused=false&tags=test",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "admin",
                "images"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "unused",
                  "value": "false"
                },
                {
                  "key": "tags",
                  "value": "test"
                }
              ]
            },
            "description": "Query: page, limit, unused=true|false, tags=tag1,tag2. Headers: Authorization: Bearer <adminToken>. Expect: 200 { success: true, images: [...], pagination: {...} }"
          },
          "response": []
        },
        {
          "name": "DELETE /api/admin/images/:id",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/admin/images/{{imageId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "admin",
                "images",
                "{{imageId}}"
              ]
            },
            "description": "Headers: Authorization: Bearer <adminToken>. Expect: 200 { success: true, message }"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Products (/api/products)",
      "item": [
        {
          "name": "GET /api/products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products"
              ]
            },
            "description": "Expect: 200 { success: true, count, data: [ { ...product, shareLink, description/flags, stock flags } ] }"
          },
          "response": []
        },
        {
          "name": "GET /api/products/slug/:slug",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/slug/test-product",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products",
                "slug",
                "test-product"
              ]
            },
            "description": "Expect: 200 { success: true, data: product } or 404 if not found"
          },
          "response": []
        },
        {
          "name": "GET /api/products/id/:id",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/id/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products",
                "id",
                "{{productId}}"
              ]
            },
            "description": "Expect: 200 { success: true, data: product } or 404"
          },
          "response": []
        },
        {
          "name": "POST /api/products [JWT]",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "if (jsonData.success) {",
                  "    pm.environment.set(\"productId\", jsonData.data._id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "title",
                  "value": "Test Product",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "This is a test product description.",
                  "type": "text"
                },
                {
                  "key": "basePrice",
                  "value": "1000",
                  "type": "text"
                },
                {
                  "key": "price",
                  "value": "950",
                  "type": "text"
                },
                {
                  "key": "stock",
                  "value": "50",
                  "type": "text"
                },
                {
                  "key": "category",
                  "value": "Electronics",
                  "type": "text"
                },
                {
                  "key": "unitTag",
                  "value": "Piece",
                  "type": "text"
                },
                {
                  "key": "groupEligible",
                  "value": "true",
                  "type": "text"
                },
                {
                  "key": "lowStockThreshold",
                  "value": "5",
                  "type": "text"
                },
                {
                  "key": "variants",
                  "value": "[{\"name\":\"Color\",\"options\":[{\"value\":\"Red\",\"stock\":10,\"price\":1000},{\"value\":\"Blue\",\"stock\":15,\"price\":1050}]}]",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products"
              ]
            },
            "description": "Headers: Authorization: Bearer <JWT>, multipart/form-data (optional files). Form fields example (without files okay): title, description, basePrice, price, stock, category, unitTag (Litres/Paint/Bags/Kg/Bottles/Piece), groupEligible (\"true\"/\"false\"), lowStockThreshold (number), variants (JSON string). Expect: 201 { success: true, message, data: productWithFlags }"
          },
          "response": []
        },
        {
          "name": "PUT /api/products/:id [JWT]",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "title",
                  "value": "Updated Test Product",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "This is an updated test product description.",
                  "type": "text"
                },
                {
                  "key": "price",
                  "value": "900",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products",
                "{{productId}}"
              ]
            },
            "description": "Similar to create; include files to replace images. Expect: 200 { success: true, message, data }"
          },
          "response": []
        },
        {
          "name": "DELETE /api/products/:id [JWT]",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products",
                "{{productId}}"
              ]
            },
            "description": "Expect: 200 { success: true, message }"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Cart (/api/cart) [JWT]",
      "item": [
        {
          "name": "GET /api/cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "if (jsonData.cartId) {",
                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/cart",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "cart"
              ]
            },
            "description": "Expect: 200 { items:[{ product populated, quantity, itemTotal }], totalPrice, itemCount, walletBalance, maxWalletUse, remainingAfterWallet }"
          },
          "response": []
        },
        {
          "name": "POST /api/cart/add",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "if (jsonData.cartId) {",
                  "    pm.environment.set(\"cartId\", jsonData.cartId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cart/add",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "cart",
                "add"
              ]
            },
            "description": "Body: { \"productId\":\"<id>\", \"quantity\": 1 }. Expect: 200 { message, items, totalPrice, itemCount, walletBalance, maxWalletUse, remainingAfterWallet }. Errors: 404 if product not found; 400 if exceeding stock"
          },
          "response": []
        },
        {
          "name": "PATCH /api/cart/update-quantity",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 3\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cart/update-quantity",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "cart",
                "update-quantity"
              ]
            },
            "description": "Body: { \"productId\":\"<id>\", \"quantity\": 3 }. Expect: 200 JSON as above; if quantity <= 0, item removed"
          },
          "response": []
        },
        {
          "name": "DELETE /api/cart/remove/:productId",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/cart/remove/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "cart",
                "remove",
                "{{productId}}"
              ]
            },
            "description": "Expect: 200 { message: \"Item removed from cart\" }"
          },
          "response": []
        },
        {
          "name": "DELETE /api/cart/clear",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/cart/clear",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "cart",
                "clear"
              ]
            },
            "description": "Expect: 200 { message: \"Cart cleared successfully\" }"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Checkout (PaymentHistory flow) (/api/checkout) [JWT]",
      "item": [
        {
          "name": "POST /api/checkout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"walletUse\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/checkout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "checkout"
              ]
            },
            "description": "Body: { \"walletUse\": 0 } or a number. Pre-reqs: User has items in cart; Products have stock. With PAYSTACK_SECRET_KEY set: If walletUse < total: Expect 200 { success: true, authorization_url, reference, amount, walletUsed, totalAmount }. Without Paystack or if you want wallet-only completion: Top up wallet directly in DB (no top-up API). In Mongo shell: db.wallets.updateOne({ user: ObjectId(\"<userId>\") }, { $set: { balance: 999999 } }). Call with walletUse equal/greater than total. Expect: 200 { success: true, message: \"Payment completed successfully using wallet\", groupBuysJoined, ... }. On success: cart is cleared, group buys may be created/updated, websocket events emitted."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Payment (Order flow) (/api/payment)",
      "item": [
        {
          "name": "POST /api/payment/initialize [JWT]",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "if (jsonData.success) {",
                  "    pm.environment.set(\"orderId\", jsonData.orderId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deliveryAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Lagos\",\n    \"state\": \"Lagos\"\n  },\n  \"phone\": \"08012345678\",\n  \"useWallet\": false,\n  \"walletAmount\": 0,\n  \"cartId\": \"{{cartId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/payment/initialize",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "payment",
                "initialize"
              ]
            },
            "description": "Body: { \"deliveryAddress\": { \"street\": \"...\", \"city\":\"...\", \"state\":\"...\" }, \"phone\":\"08012345678\", \"useWallet\": true, \"walletAmount\": 0, \"cartId\":\"<cartObjectId>\" }. Pre-reqs: A Cart document exists (this route requires cartId; GET /api/cart does not return it. You’ll need to fetch it from MongoDB: db.carts.findOne({ user: ObjectId(\"<userId>\") })._id). Products in cart have stock. With PAYSTACK_SECRET_KEY set and amountToPay > 0: Expect: 200 { success: true, paymentUrl, reference, orderId, message }. Cart is deleted upon successful init. If amountToPay == 0 (wallet covers all), current code still initializes Paystack (unlike /api/checkout), so you’ll likely see 400 unless you reduce wallet use; use the /api/checkout path if you want wallet-only completion for now."
          },
          "response": []
        },
        {
          "name": "POST /api/payment/webhook/paystack",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-paystack-signature",
                "value": "GENERATE_HMAC_SHA512_OF_RAW_BODY_WITH_PAYSTACK_SECRET_KEY",
                "description": "You need to generate this signature using your PAYSTACK_SECRET_KEY and the raw request body."
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"charge.success\",\n  \"data\": {\n    \"reference\": \"grup_{{orderId}}_{{Date.now}}\",\n    \"amount\": 100000, \n    \"status\": \"success\",\n    \"metadata\": {\n      \"orderId\": \"{{orderId}}\",\n      \"userId\": \"{{userId}}\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/payment/webhook/paystack",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "payment",
                "webhook",
                "paystack"
              ]
            },
            "description": "Headers: x-paystack-signature: <sha512 of raw body using PAYSTACK_SECRET_KEY>. Body: Paystack event JSON (charge.success). Expect: 200 { message: \"Webhook processed\" } if signature valid. Effect: finds Order by metadata.orderId, marks paid, deducts walletUsed (if any), logs Transaction, pushes progress."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const crypto = require('crypto');",
                  "const paystackSecretKey = pm.environment.get('paystackSecretKey'); // Ensure this env var is set in Postman",
                  "if (!paystackSecretKey) {",
                  "    console.error('Error: paystackSecretKey environment variable is not set.');",
                  "    return;",
                  "}",
                  "const rawBody = pm.request.body.raw;",
                  "const hash = crypto.createHmac('sha512', paystackSecretKey).update(rawBody).digest('hex');",
                  "pm.request.headers.upsert({ key: 'x-paystack-signature', value: hash });",
                  "console.log('Pre-request Script: Generated Signature:', hash);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Generic Webhooks (/api/webhook)",
      "item": [
        {
          "name": "POST /api/webhook/paystack",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-paystack-signature",
                "value": "GENERATE_HMAC_SHA512_OF_RAW_BODY_WITH_PAYSTACK_SECRET_KEY",
                "description": "You need to generate this signature using your PAYSTACK_SECRET_KEY and the raw request body."
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"charge.success\",\n  \"data\": {\n    \"reference\": \"GRP_{{nanoid}}_{{Date.now}}\",\n    \"amount\": 100000,\n    \"status\": \"success\",\n    \"metadata\": {\n      \"paymentHistoryId\": \"{{paymentHistoryId}}\",\n      \"userId\": \"{{userId}}\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/webhook/paystack",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "webhook",
                "paystack"
              ]
            },
            "description": "Same as above but reconciles PaymentHistory using referenceId; deducts wallet, processes group buys, clears cart. Expect 200 on valid signature, 400 on invalid."
          },
          "response": []
        },
        {
          "name": "POST /api/webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-webhook-provider",
                "value": "paystack"
              },
              {
                "key": "x-webhook-signature",
                "value": "GENERATE_HMAC_SHA512_OF_RAW_BODY_WITH_PROVIDER_SECRET_KEY",
                "description": "You need to generate this signature using the provider's secret key and the raw request body."
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"charge.completed\",\n  \"data\": {\n    \"tx_ref\": \"order_{{orderId}}\",\n    \"status\": \"successful\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/webhook",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "webhook"
              ]
            },
            "description": "Headers: x-webhook-provider: paystack|flutterwave|stripe, x-webhook-signature: HMAC of body with provider-specific secret env (e.g., PAYSTACK_WEBHOOK_SECRET if you add it). Body: provider event. Expect: 200 { message: \"Webhook processed successfully\" } on valid signature. Stripe handler is placeholder; Flutterwave handler marks order paid using metadata.orderId in tx_ref flows."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Group Buys (/api/group and /api/groupbuy)",
      "item": [
        {
          "name": "GET /api/group/active",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/group/active",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "group",
                "active"
              ]
            },
            "description": "Expect: 200 { success: true, data:[{ ...groupBuy, progressPercentage, timeRemaining, isViable, spotsRemaining }], pagination }"
          },
          "response": []
        },
        {
          "name": "GET /api/group/product/:productId",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/group/product/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "group",
                "product",
                "{{productId}}"
              ]
            },
            "description": "Expect: 200 with hasActiveGroupBuy flag: If found: { success: true, hasActiveGroupBuy: true, data: { ...group, progressPercentage, ... } }. If none: { success: true, hasActiveGroupBuy: false, message }"
          },
          "response": []
        },
        {
          "name": "GET /api/group/my-groups [JWT]",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/group/my-groups",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "group",
                "my-groups"
              ]
            },
            "description": "Expect: 200 { success: true, data:[...], count }"
          },
          "response": []
        },
        {
          "name": "GET /api/group/stats",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/group/stats",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "group",
                "stats"
              ]
            },
            "description": "Expect: 200 { success: true, stats: { total, active, successful, manualReview, failed, byStatus:[...] } }"
          },
          "response": []
        },
        {
          "name": "GET /api/group/manual-review [JWT]",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/group/manual-review",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "group",
                "manual-review"
              ]
            },
            "description": "Expect: 200 { success: true, data:[{ group, totalCollected, participantCount, shortfall, progressPercentage }], pagination }"
          },
          "response": []
        },
        {
          "name": "PATCH /api/group/:groupBuyId/status [JWT]",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"successful\",\n  \"adminNotes\": \"Manually marked as successful after review.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/group/{{groupBuyId}}/status",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "group",
                "{{groupBuyId}}",
                "status"
              ]
            },
            "description": "Body: { \"status\":\"successful\" | \"failed\", \"adminNotes\": \"...\" }. Expect: 200 { success: true, message, data: groupBuy }. Emits: groupBuyStatusUpdate via WebSocket. Note: There is no explicit role check; any JWT can call it in current code."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Orders (/api/orders) [JWT]",
      "item": [
        {
          "name": "GET /api/orders/my-orders",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders/my-orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "orders",
                "my-orders"
              ]
            },
            "description": "Expect: 200 array of orders with populated products, recalculated priorityScore and allGroupsSecured flags."
          },
          "response": []
        },
        {
          "name": "GET /api/orders/progress/:orderId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders/progress/{{orderId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "orders",
                "progress",
                "{{orderId}}"
              ]
            },
            "description": "Expect: 200 { order, estimatedDelivery: date|null, groupsProgress: [{ productId, productTitle, groupStatus, groupProgress, participantCount }] }. If not found: 404"
          },
          "response": []
        },
        {
          "name": "GET /api/orders/admin/all",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders/admin/all",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "orders",
                "admin",
                "all"
              ]
            },
            "description": "Expect: 200 array of all orders with user, items, sorted by priorityScore desc then createdAt desc."
          },
          "response": []
        },
        {
          "name": "PUT /api/orders/admin/:orderId/status",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"processing\",\n  \"message\": \"Order is now being processed.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/admin/{{orderId}}/status",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "orders",
                "admin",
                "{{orderId}}",
                "status"
              ]
            },
            "description": "Body: { \"status\":\"processing\" (or other), \"message\":\"optional\" }. Expect: 200 { message:\"Order status updated successfully\", order }. Note: No explicit role checks; any JWT can call it currently."
          },
          "response": []
        },
        {
          "name": "POST /api/orders (Placeholder)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "orders"
              ]
            },
            "description": "This route is defined with middleware only and no handler. POST likely returns 404 (no handler). Consider it a placeholder."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Live Users (/api/live-users)",
      "item": [
        {
          "name": "POST /api/live-users/activity [JWT]",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPage\": \"/home\",\n  \"socketId\": \"<optional-socket-id>\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/live-users/activity",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "live-users",
                "activity"
              ]
            },
            "description": "Body: { \"currentPage\":\"/home\", \"socketId\":\"<optional-socket-id>\" }. Expect: 200 { message: \"Activity updated\" }. Side effects: Upserts LiveUserSession, updates User isOnline and lastSeen."
          },
          "response": []
        },
        {
          "name": "GET /api/live-users/count",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/live-users/count",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "live-users",
                "count"
              ]
            },
            "description": "Expect: 200 { liveUsers: <number active in last 5 minutes> }"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Delivery (/api/delivery) - Removed",
      "item": [
        {
          "name": "All delivery coordinate-related endpoints have been removed.",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "Removed",
              "host": [
                "Removed"
              ],
              "path": [
                "Removed"
              ]
            },
            "description": "The /api/delivery/calculate-fee and /api/delivery/search-address endpoints, along with their associated logic, have been removed as per your request."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Regions (/api/region)",
      "item": [
        {
          "name": "GET /api/region",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/region",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "region"
              ]
            },
            "description": "Expect: 200 { success: true, regions:[...], message }"
          },
          "response": []
        },
        {
          "name": "GET /api/region/detect - Removed",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "Removed",
              "host": [
                "Removed"
              ],
              "path": [
                "Removed"
              ]
            },
            "description": "This endpoint has been removed as it relied on user delivery coordinates."
          },
          "response": []
        },
        {
          "name": "GET /api/region/:regionId/products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/region/{{regionId}}/products?category=Electronics&page=1&limit=20",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "region",
                "{{regionId}}",
                "products"
              ],
              "query": [
                {
                  "key": "category",
                  "value": "Electronics"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            },
            "description": "Expect: 200 { success: true, region: \"<displayName>\", products:[{...product, regionalInfo}], pagination }"
          },
          "response": []
        },
        {
          "name": "POST /api/region/set [JWT]",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"regionId\": \"<your-region-id>\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/region/set",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "region",
                "set"
              ]
            },
            "description": "Body: { \"regionId\":\"<id>\" }. Expect: 200 { success: true, message, region:{... plus stats} }. Side effects: Saves preference on user if JWT is provided."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Referrals (/api/referral)",
      "item": [
        {
          "name": "GET /api/referral/info [JWT]",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/referral/info",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "referral",
                "info"
              ]
            },
            "description": "Expect: 200 { referralCode, referralLink, referredUsers:[], referredBy, totalReferrals, hasReceivedBonus, referralsNeeded, bonusAmount, referralTransactions:[], walletBalance }"
          },
          "response": []
        },
        {
          "name": "GET /api/referral/stats [JWT]",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/referral/stats",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "referral",
                "stats"
              ]
            },
            "description": "Expect: 200 { totalReferrals, referralsNeeded, progressPercentage, hasReceivedBonus, bonusAmount, nextMilestone|null }"
          },
          "response": []
        },
        {
          "name": "GET /api/referral/validate/:referralCode",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/referral/validate/{{referralCode}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "referral",
                "validate",
                "{{referralCode}}"
              ]
            },
            "description": "Expect: 200 { valid: true, referrer:{ name, referralCode }, message } or 404 { valid:false }"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Wallet (/api/wallet)",
      "item": [
        {
          "name": "GET /api/wallet [JWT]",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/wallet",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "wallet"
              ]
            },
            "description": "Expect: 200 { balance, transactions:[... last 50], referralInfo:{ referralCode, hasReceivedBonus, totalReferrals, referralsNeeded } }"
          },
          "response": []
        },
        {
          "name": "POST /api/wallet/calculate-offset [JWT]",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"totalAmount\": 12000,\n  \"requestedWalletUse\": 5000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/wallet/calculate-offset",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "wallet",
                "calculate-offset"
              ]
            },
            "description": "Body: { \"totalAmount\": 12000, \"requestedWalletUse\": 5000 }. Expect: 200 { walletBalance, maxWalletUse, walletUsed, remainingToPay }"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Analytics (Not Mounted)",
      "item": [
        {
          "name": "GET /api/analytics/* (Not Mounted)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/analytics/some-endpoint",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "analytics",
                "some-endpoint"
              ]
            },
            "description": "The routes in routes/analyticsRoutes.js are not mounted in server.mjs, so any request to /api/analytics/* will 404 unless mounted."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Frontend-referenced but missing",
      "item": [
        {
          "name": "GET /api/group/group-status/:productId (Missing)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/group/group-status/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "group",
                "group-status",
                "{{productId}}"
              ]
            },
            "description": "Frontend components call this, but no route exists. You’ll get 404."
          },
          "response": []
        }
      ]
    }
  ]
}